{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureStateManager = void 0;\n\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\n\nvar _State = require(\"../../State\");\n\nvar _utils = require(\"../../utils\");\n\nvar warningMessage = (0, _utils.tagMessage)('react-native-reanimated is required in order to use synchronous state management');\nvar GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (_reanimatedWrapper.Reanimated) {\n              _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.BEGAN);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            Reanimated: _reanimatedWrapper.Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: _State.State.BEGAN\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State,warningMessage}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 5423834197456;\n          _f.__location = \"C:\\\\Users\\\\priya\\\\trial\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (10:13)\";\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (_reanimatedWrapper.Reanimated) {\n              _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.ACTIVE);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            Reanimated: _reanimatedWrapper.Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: _State.State.ACTIVE\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State,warningMessage}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 6604793719507;\n          _f.__location = \"C:\\\\Users\\\\priya\\\\trial\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (19:16)\";\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (_reanimatedWrapper.Reanimated) {\n              _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.FAILED);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            Reanimated: _reanimatedWrapper.Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: _State.State.FAILED\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State,warningMessage}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 2423361914396;\n          _f.__location = \"C:\\\\Users\\\\priya\\\\trial\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (28:12)\";\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (_reanimatedWrapper.Reanimated) {\n              _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.END);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            Reanimated: _reanimatedWrapper.Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              END: _State.State.END\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State,warningMessage}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 4444470920720;\n          _f.__location = \"C:\\\\Users\\\\priya\\\\trial\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (37:11)\";\n          return _f;\n        }()\n      };\n    };\n\n    _f._closure = {\n      Reanimated: _reanimatedWrapper.Reanimated,\n      State: {\n        BEGAN: _State.State.BEGAN,\n        ACTIVE: _State.State.ACTIVE,\n        FAILED: _State.State.FAILED,\n        END: _State.State.END\n      },\n      warningMessage: warningMessage\n    };\n    _f.asString = \"function create(handlerTag){const{Reanimated,State,warningMessage}=jsThis._closure;{return{begin:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}},activate:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}},fail:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}},end:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}};}}\";\n    _f.__workletHash = 3329128186569;\n    _f.__location = \"C:\\\\Users\\\\priya\\\\trial\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js\";\n    return _f;\n  }()\n};\nexports.GestureStateManager = GestureStateManager;","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["warningMessage","tagMessage","GestureStateManager","create","handlerTag","begin","Reanimated","State","console","activate","fail","end"],"mappings":";;;;;AAAA;;AACA;;AACA;;AASA,IAAMA,cAAc,GAAGC,IAAAA,iBAAAA,EACrB,kFADqBA,CAAvB;AAIO,IAAMC,mBAAmB,GAAG;EACjCC,MADiC;IAAA,qBAC1BC,UAD0B,EACmB;MAElD,OAAO;QACLC,KAAK;UAAA,uBAAQ;YAEX,IAAA,6BAAA,EAAgB;cACdC,6BAAAA,CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,YAAAA,CAAvCD,KAAAA;YADF,CAAA,MAEO;cACLE,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;YACD;UAPE,CACA;;UAAA;YAAA,YAjBX,6BAiBW;YAAA,YARYP,UAQZ;YAAA;cAAA,OAPT,YAAA,CADF;YAQW;YAAA,gBAHH;UAGG;UAAA;UAAA;UAAA;UAAA;QAAA,GADA;QAULQ,QAAQ;UAAA,uBAAQ;YAEd,IAAA,6BAAA,EAAgB;cACdH,6BAAAA,CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,YAAAA,CAAvCD,MAAAA;YADF,CAAA,MAEO;cACLE,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;YACD;UAhBE,CAUG;;UAAA;YAAA,YA1Bd,6BA0Bc;YAAA,YAjBSP,UAiBT;YAAA;cAAA,QAhBZ,YAAA,CADF;YAiBc;YAAA,gBAZN;UAYM;UAAA;UAAA;UAAA;UAAA;QAAA,GAVH;QAmBLS,IAAI;UAAA,uBAAQ;YAEV,IAAA,6BAAA,EAAgB;cACdJ,6BAAAA,CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,YAAAA,CAAvCD,MAAAA;YADF,CAAA,MAEO;cACLE,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;YACD;UAzBE,CAmBD;;UAAA;YAAA,YAnCV,6BAmCU;YAAA,YA1BaP,UA0Bb;YAAA;cAAA,QAzBR,YAAA,CADF;YA0BU;YAAA,gBArBF;UAqBE;UAAA;UAAA;UAAA;UAAA;QAAA,GAnBC;QA4BLU,GAAG;UAAA,uBAAQ;YAET,IAAA,6BAAA,EAAgB;cACdL,6BAAAA,CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,YAAAA,CAAvCD,GAAAA;YADF,CAAA,MAEO;cACLE,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;YACD;UACF,CAPE;;UAAA;YAAA,YA5CT,6BA4CS;YAAA,YAnCcP,UAmCd;YAAA;cAAA,KAlCP,YAAA,CADF;YAmCS;YAAA,gBA9BD;UA8BC;UAAA;UAAA;UAAA;UAAA;QAAA;MA5BE,CAAP;IAqCD,CAxCgC;;IAAA;MAAA,YA2BzBO,6BA3ByB;MAAA;QAAA,O,kBAAA;QAAA,QAU1B,YAAA,CAAA,MAV0B;QAAA,QAmB1B,YAAA,CAAA,MAnB0B;QAAA,KA4B1B,YAAA,CAAA;MA5B0B;MAAA,gBA+BlB;IA/BkB;IAAA;IAAA;IAAA;IAAA;EAAA;AAAA,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}