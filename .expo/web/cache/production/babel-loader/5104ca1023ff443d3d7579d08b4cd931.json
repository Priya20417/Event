{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import Platform from\"react-native-web/dist/exports/Platform\";import findNodeHandleRN from\"react-native-web/dist/exports/findNodeHandle\";import{handlerIDToTag}from\"./handlersRegistry\";import{toArray}from\"../utils\";var commonProps=['id','enabled','shouldCancelWhenOutside','hitSlop'];var componentInteractionProps=['waitFor','simultaneousHandlers'];export var baseGestureHandlerProps=[].concat(commonProps,componentInteractionProps,['onBegan','onFailed','onCancelled','onActivated','onEnded','onGestureEvent','onHandlerStateChange']);export var baseGestureHandlerWithMonitorProps=[].concat(commonProps,['needsPointerData','manualActivation']);function isConfigParam(param,name){return param!==undefined&&(param!==Object(param)||!('__isNative'in param))&&name!=='onHandlerStateChange'&&name!=='onGestureEvent';}export function filterConfig(props,validProps){var defaults=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var filteredConfig=_objectSpread({},defaults);for(var _iterator=_createForOfIteratorHelperLoose(validProps),_step;!(_step=_iterator()).done;){var key=_step.value;var value=props[key];if(isConfigParam(value,key)){if(key==='simultaneousHandlers'||key==='waitFor'){value=transformIntoHandlerTags(props[key]);}else if(key==='hitSlop'&&typeof value!=='object'){value={top:value,left:value,bottom:value,right:value};}filteredConfig[key]=value;}}return filteredConfig;}function transformIntoHandlerTags(handlerIDs){handlerIDs=toArray(handlerIDs);if(Platform.OS==='web'){return handlerIDs.map(function(_ref){var current=_ref.current;return current;}).filter(function(handle){return handle;});}return handlerIDs.map(function(handlerID){var _handlerID$current;return handlerIDToTag[handlerID]||((_handlerID$current=handlerID.current)===null||_handlerID$current===void 0?void 0:_handlerID$current.handlerTag)||-1;}).filter(function(handlerTag){return handlerTag>0;});}export function findNodeHandle(node){if(Platform.OS==='web')return node;return findNodeHandleRN(node);}","map":{"version":3,"mappings":"2/DAUA,OAASA,cAAT,0BACA,OAASC,OAAT,gBAEA,GAAMC,YAAW,CAAG,CAClB,IADkB,CAElB,SAFkB,CAGlB,yBAHkB,CAIlB,SAJkB,CAApB,CAOA,GAAMC,0BAAyB,CAAG,CAAC,SAAD,CAAY,sBAAZ,CAAlC,CAEA,MAAO,IAAMC,wBAAuB,WAC/BF,WAD+B,CAE/BC,yBAF+B,EAGlC,SAHkC,CAIlC,UAJkC,CAKlC,aALkC,CAMlC,aANkC,CAOlC,SAPkC,CAQlC,gBARkC,CASlC,sBATkC,EAA7B,CAYP,MAAO,IAAME,mCAAkC,WAC1CH,WAD0C,EAE7C,kBAF6C,CAG7C,kBAH6C,EAAxC,CAgGP,QAASI,cAAT,CAAuBC,KAAvB,CAAuCC,IAAvC,CAAqD,CAGnD,MACED,MAAK,GAAKE,SAAVF,GACCA,KAAK,GAAKG,MAAM,CAACH,KAAD,CAAhBA,EACC,EAAE,cAAiBA,MAAnB,CAFFA,GAGAC,IAAI,GAAK,sBAHTD,EAIAC,IAAI,GAAK,gBALX,CAOD,CAED,MAAO,SAASG,aAAT,CACLC,KADK,CAELC,UAFK,CAIL,IADAC,SACA,2DADoC,EACpC,CACA,GAAMC,eAAc,kBAAQD,QAAR,CAApB,CACA,kDAAkBD,UAAlB,mCAA8B,IAAnBG,IAAmB,aAC5B,GAAIC,MAAK,CAAGL,KAAK,CAACI,GAAD,CAAjB,CACA,GAAIV,aAAa,CAACW,KAAD,CAAQD,GAAR,CAAjB,CAA+B,CAC7B,GAAIA,GAAG,GAAK,sBAARA,EAAkCA,GAAG,GAAK,SAA9C,CAAyD,CACvDC,KAAK,CAAGC,wBAAwB,CAACN,KAAK,CAACI,GAAD,CAAN,CAAhCC,CADF,KAEO,IAAID,GAAG,GAAK,SAARA,EAAqB,MAAOC,MAAP,GAAiB,QAA1C,CAAoD,CACzDA,KAAK,CAAG,CAAEE,GAAG,CAAEF,KAAP,CAAcG,IAAI,CAAEH,KAApB,CAA2BI,MAAM,CAAEJ,KAAnC,CAA0CK,KAAK,CAAEL,KAAjD,CAARA,CACD,CACDF,cAAc,CAACC,GAAD,CAAdD,CAAsBE,KAAtBF,CACD,CACF,CACD,MAAOA,eAAP,CACD,CAED,QAASG,yBAAT,CAAkCK,UAAlC,CAAmD,CACjDA,UAAU,CAAGtB,OAAO,CAACsB,UAAD,CAApBA,CAEA,GAAIC,QAAQ,CAACC,EAATD,GAAgB,KAApB,CAA2B,CACzB,MAAOD,WAAU,CACdG,GADIH,CACA,kBAAGI,QAAH,MAAGA,OAAH,OAAmCA,QAAnC,EADAJ,EAEJK,MAFIL,CAEIM,eAAD,QAAiBA,OAAjB,EAFHN,CAAP,CAJ+C,CASjD,MAAOA,WAAU,CACdG,GADIH,CAEFO,kBAAD,+BACE9B,eAAc,CAAC8B,SAAD,CAAd9B,uBAA6B8B,SAAS,CAACH,OAAvC,6CAA6BI,mBAAmBC,UAAhDhC,GAA8D,CAAC,CADjE,CAFG,GAKJ4B,MALIL,CAKIS,mBAAD,QAAwBA,WAAU,CAAG,CAArC,EALHT,CAAP,CAMD,CAED,MAAO,SAASU,eAAT,CACLC,IADK,CAEkE,CACvE,GAAIV,QAAQ,CAACC,EAATD,GAAgB,KAApB,CAA2B,MAAOU,KAAP,CAC3B,MAAOC,iBAAgB,CAACD,IAAD,CAAvB,CACD","names":["handlerIDToTag","toArray","commonProps","componentInteractionProps","baseGestureHandlerProps","baseGestureHandlerWithMonitorProps","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","filteredConfig","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Platform","OS","map","current","filter","handle","handlerID","_handlerID$current","handlerTag","findNodeHandle","node","findNodeHandleRN"],"sources":["gestureHandlerCommon.ts"],"sourcesContent":["// Previous types exported gesture handlers as classes which creates an interface and variable, both named the same as class.\n// Without those types, we'd introduce breaking change, forcing users to prefix every handler type specification with typeof\n// e.g. React.createRef<TapGestureHandler> -> React.createRef<typeof TapGestureHandler>.\n// See https://www.typescriptlang.org/docs/handbook/classes.html#constructor-functions for reference.\nimport * as React from 'react';\nimport { Platform, findNodeHandle as findNodeHandleRN } from 'react-native';\n\nimport { State } from '../State';\nimport { EventType } from '../EventType';\nimport { ValueOf } from '../typeUtils';\nimport { handlerIDToTag } from './handlersRegistry';\nimport { toArray } from '../utils';\n\nconst commonProps = [\n  'id',\n  'enabled',\n  'shouldCancelWhenOutside',\n  'hitSlop',\n] as const;\n\nconst componentInteractionProps = ['waitFor', 'simultaneousHandlers'] as const;\n\nexport const baseGestureHandlerProps = [\n  ...commonProps,\n  ...componentInteractionProps,\n  'onBegan',\n  'onFailed',\n  'onCancelled',\n  'onActivated',\n  'onEnded',\n  'onGestureEvent',\n  'onHandlerStateChange',\n] as const;\n\nexport const baseGestureHandlerWithMonitorProps = [\n  ...commonProps,\n  'needsPointerData',\n  'manualActivation',\n];\n\nexport interface GestureEventPayload {\n  handlerTag: number;\n  numberOfPointers: number;\n  state: ValueOf<typeof State>;\n}\n\nexport interface HandlerStateChangeEventPayload {\n  handlerTag: number;\n  numberOfPointers: number;\n  state: ValueOf<typeof State>;\n  oldState: ValueOf<typeof State>;\n}\n\nexport type HitSlop =\n  | number\n  | Partial<\n      Record<\n        'left' | 'right' | 'top' | 'bottom' | 'vertical' | 'horizontal',\n        number\n      >\n    >\n  | Record<'width' | 'left', number>\n  | Record<'width' | 'right', number>\n  | Record<'height' | 'top', number>\n  | Record<'height' | 'bottom', number>;\n\n//TODO(TS) events in handlers\n\nexport interface GestureEvent<ExtraEventPayloadT = Record<string, unknown>> {\n  nativeEvent: Readonly<GestureEventPayload & ExtraEventPayloadT>;\n}\nexport interface HandlerStateChangeEvent<\n  ExtraEventPayloadT = Record<string, unknown>\n> {\n  nativeEvent: Readonly<HandlerStateChangeEventPayload & ExtraEventPayloadT>;\n}\n\nexport type TouchData = {\n  id: number;\n  x: number;\n  y: number;\n  absoluteX: number;\n  absoluteY: number;\n};\n\nexport type GestureTouchEvent = {\n  handlerTag: number;\n  numberOfTouches: number;\n  state: ValueOf<typeof State>;\n  eventType: EventType;\n  allTouches: TouchData[];\n  changedTouches: TouchData[];\n};\n\nexport type GestureUpdateEvent<\n  GestureEventPayloadT = Record<string, unknown>\n> = GestureEventPayload & GestureEventPayloadT;\n\nexport type GestureStateChangeEvent<\n  GestureStateChangeEventPayloadT = Record<string, unknown>\n> = HandlerStateChangeEventPayload & GestureStateChangeEventPayloadT;\n\nexport type CommonGestureConfig = {\n  enabled?: boolean;\n  shouldCancelWhenOutside?: boolean;\n  hitSlop?: HitSlop;\n};\n\n// Events payloads are types instead of interfaces due to TS limitation.\n// See https://github.com/microsoft/TypeScript/issues/15300 for more info.\nexport type BaseGestureHandlerProps<\n  ExtraEventPayloadT extends Record<string, unknown> = Record<string, unknown>\n> = CommonGestureConfig & {\n  id?: string;\n  waitFor?: React.Ref<unknown> | React.Ref<unknown>[];\n  simultaneousHandlers?: React.Ref<unknown> | React.Ref<unknown>[];\n  // TODO(TS) - fix event types\n  onBegan?: (event: HandlerStateChangeEvent) => void;\n  onFailed?: (event: HandlerStateChangeEvent) => void;\n  onCancelled?: (event: HandlerStateChangeEvent) => void;\n  onActivated?: (event: HandlerStateChangeEvent) => void;\n  onEnded?: (event: HandlerStateChangeEvent) => void;\n\n  //TODO(TS) consider using NativeSyntheticEvent\n  onGestureEvent?: (event: GestureEvent<ExtraEventPayloadT>) => void;\n  onHandlerStateChange?: (\n    event: HandlerStateChangeEvent<ExtraEventPayloadT>\n  ) => void;\n};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nexport function filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const filteredConfig = { ...defaults };\n  for (const key of validProps) {\n    let value = props[key];\n    if (isConfigParam(value, key)) {\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop' && typeof value !== 'object') {\n        value = { top: value, left: value, bottom: value, right: value };\n      }\n      filteredConfig[key] = value;\n    }\n  }\n  return filteredConfig;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  handlerIDs = toArray(handlerIDs);\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\nexport function findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n"]},"metadata":{},"sourceType":"module"}