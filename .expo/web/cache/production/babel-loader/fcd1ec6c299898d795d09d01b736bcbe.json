{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";var _stateToPropMappings;function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}var _UIManagerAny$getView,_UIManagerAny$getView2,_UIManagerAny$getCons;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import Touchable from\"react-native-web/dist/exports/Touchable\";import UIManager from\"react-native-web/dist/exports/UIManager\";import DeviceEventEmitter from\"react-native-web/dist/exports/DeviceEventEmitter\";import deepEqual from'lodash/isEqual';import RNGestureHandlerModule from\"../RNGestureHandlerModule\";import{State}from\"../State\";import{handlerIDToTag,getNextHandlerTag}from\"./handlersRegistry\";import{filterConfig,findNodeHandle}from\"./gestureHandlerCommon\";var UIManagerAny=UIManager;var customGHEventsConfig={onGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},onGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}};UIManagerAny.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManagerAny.genericDirectEventTypes),customGHEventsConfig);var UIManagerConstants=(_UIManagerAny$getView=(_UIManagerAny$getView2=UIManagerAny.getViewManagerConfig)===null||_UIManagerAny$getView2===void 0?void 0:_UIManagerAny$getView2.call(UIManagerAny,'getConstants'))!==null&&_UIManagerAny$getView!==void 0?_UIManagerAny$getView:(_UIManagerAny$getCons=UIManagerAny.getConstants)===null||_UIManagerAny$getCons===void 0?void 0:_UIManagerAny$getCons.call(UIManagerAny);if(UIManagerConstants){UIManagerConstants.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManagerConstants.genericDirectEventTypes),customGHEventsConfig);}var _UIManagerAny$setJSRe=UIManagerAny.setJSResponder,oldSetJSResponder=_UIManagerAny$setJSRe===void 0?function(){}:_UIManagerAny$setJSRe,_UIManagerAny$clearJS=UIManagerAny.clearJSResponder,oldClearJSResponder=_UIManagerAny$clearJS===void 0?function(){}:_UIManagerAny$clearJS;UIManagerAny.setJSResponder=function(tag,blockNativeResponder){RNGestureHandlerModule.handleSetJSResponder(tag,blockNativeResponder);oldSetJSResponder(tag,blockNativeResponder);};UIManagerAny.clearJSResponder=function(){RNGestureHandlerModule.handleClearJSResponder();oldClearJSResponder();};var allowTouches=true;var DEV_ON_ANDROID=__DEV__&&Platform.OS==='android';if(DEV_ON_ANDROID){DeviceEventEmitter.addListener('toggleElementInspector',function(){allowTouches=!allowTouches;});}function hasUnresolvedRefs(props){var extract=function extract(refs){if(!Array.isArray(refs)){return refs&&refs.current===null;}return refs.some(function(r){return r&&r.current===null;});};return extract(props['simultaneousHandlers'])||extract(props['waitFor']);}var stateToPropMappings=(_stateToPropMappings={},_defineProperty2(_stateToPropMappings,State.UNDETERMINED,undefined),_defineProperty2(_stateToPropMappings,State.BEGAN,'onBegan'),_defineProperty2(_stateToPropMappings,State.FAILED,'onFailed'),_defineProperty2(_stateToPropMappings,State.CANCELLED,'onCancelled'),_defineProperty2(_stateToPropMappings,State.ACTIVE,'onActivated'),_defineProperty2(_stateToPropMappings,State.END,'onEnded'),_stateToPropMappings);export default function createHandler(_ref){var name=_ref.name,_ref$allowedProps=_ref.allowedProps,allowedProps=_ref$allowedProps===void 0?[]:_ref$allowedProps,_ref$config=_ref.config,config=_ref$config===void 0?{}:_ref$config,transformProps=_ref.transformProps,_ref$customNativeProp=_ref.customNativeProps,customNativeProps=_ref$customNativeProp===void 0?[]:_ref$customNativeProp;var Handler=function(_React$Component){_inherits(Handler,_React$Component);var _super=_createSuper(Handler);function Handler(props){var _this;_classCallCheck(this,Handler);_this=_super.call(this,props);_defineProperty(_assertThisInitialized(_this),\"handlerTag\",void 0);_defineProperty(_assertThisInitialized(_this),\"config\",void 0);_defineProperty(_assertThisInitialized(_this),\"propsRef\",void 0);_defineProperty(_assertThisInitialized(_this),\"viewNode\",void 0);_defineProperty(_assertThisInitialized(_this),\"viewTag\",void 0);_defineProperty(_assertThisInitialized(_this),\"updateEnqueued\",null);_defineProperty(_assertThisInitialized(_this),\"inspectorToggleListener\",void 0);_defineProperty(_assertThisInitialized(_this),\"onGestureHandlerEvent\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){var _this$props$onGesture,_this$props;(_this$props$onGesture=(_this$props=_this.props).onGestureEvent)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props,event);}else{var _this$props$onGesture2,_this$props2;(_this$props$onGesture2=(_this$props2=_this.props).onGestureHandlerEvent)===null||_this$props$onGesture2===void 0?void 0:_this$props$onGesture2.call(_this$props2,event);}});_defineProperty(_assertThisInitialized(_this),\"onGestureHandlerStateChange\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){var _this$props$onHandler,_this$props3;(_this$props$onHandler=(_this$props3=_this.props).onHandlerStateChange)===null||_this$props$onHandler===void 0?void 0:_this$props$onHandler.call(_this$props3,event);var state=event.nativeEvent.state;var stateEventName=stateToPropMappings[state];var eventHandler=stateEventName&&_this.props[stateEventName];if(eventHandler&&typeof eventHandler==='function'){eventHandler(event);}}else{var _this$props$onGesture3,_this$props4;(_this$props$onGesture3=(_this$props4=_this.props).onGestureHandlerStateChange)===null||_this$props$onGesture3===void 0?void 0:_this$props$onGesture3.call(_this$props4,event);}});_defineProperty(_assertThisInitialized(_this),\"refHandler\",function(node){_this.viewNode=node;var child=React.Children.only(_this.props.children);var ref=child.ref;if(ref!==null){if(typeof ref==='function'){ref(node);}else{ref.current=node;}}});_defineProperty(_assertThisInitialized(_this),\"createGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.createGestureHandler(name,_this.handlerTag,newConfig);});_defineProperty(_assertThisInitialized(_this),\"attachGestureHandler\",function(newViewTag){_this.viewTag=newViewTag;if(Platform.OS==='web'){RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag,false,_this.propsRef);}else{RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag,false);}});_defineProperty(_assertThisInitialized(_this),\"updateGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.updateGestureHandler(_this.handlerTag,newConfig);});_this.handlerTag=getNextHandlerTag();_this.config={};_this.propsRef=React.createRef();_this.state={allowTouches:allowTouches};if(props.id){if(handlerIDToTag[props.id]!==undefined){throw new Error(\"Handler with ID \\\"\"+props.id+\"\\\" already registered\");}handlerIDToTag[props.id]=_this.handlerTag;}return _this;}_createClass(Handler,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var props=this.props;if(DEV_ON_ANDROID){this.inspectorToggleListener=DeviceEventEmitter.addListener('toggleElementInspector',function(){_this2.setState(function(_){return{allowTouches:allowTouches};});_this2.update();});}if(hasUnresolvedRefs(props)){this.updateEnqueued=setImmediate(function(){_this2.updateEnqueued=null;_this2.update();});}this.createGestureHandler(filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config));this.attachGestureHandler(findNodeHandle(this.viewNode));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var viewTag=findNodeHandle(this.viewNode);if(this.viewTag!==viewTag){this.attachGestureHandler(viewTag);}this.update();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var _this$inspectorToggle;(_this$inspectorToggle=this.inspectorToggleListener)===null||_this$inspectorToggle===void 0?void 0:_this$inspectorToggle.remove();RNGestureHandlerModule.dropGestureHandler(this.handlerTag);if(this.updateEnqueued){clearImmediate(this.updateEnqueued);}var handlerID=this.props.id;if(handlerID){delete handlerIDToTag[handlerID];}}},{key:\"update\",value:function update(){var newConfig=filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);if(!deepEqual(this.config,newConfig)){this.updateGestureHandler(newConfig);}}},{key:\"setNativeProps\",value:function setNativeProps(updates){var mergedProps=_objectSpread(_objectSpread({},this.props),updates);var newConfig=filterConfig(transformProps?transformProps(mergedProps):mergedProps,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);this.updateGestureHandler(newConfig);}},{key:\"render\",value:function render(){var gestureEventHandler=this.onGestureHandlerEvent;var _this$props5=this.props,onGestureEvent=_this$props5.onGestureEvent,onGestureHandlerEvent=_this$props5.onGestureHandlerEvent;if(onGestureEvent&&typeof onGestureEvent!=='function'){if(onGestureHandlerEvent){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureEventHandler=onGestureEvent;}else{if(onGestureHandlerEvent&&typeof onGestureHandlerEvent!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var gestureStateEventHandler=this.onGestureHandlerStateChange;var _this$props6=this.props,onHandlerStateChange=_this$props6.onHandlerStateChange,onGestureHandlerStateChange=_this$props6.onGestureHandlerStateChange;if(onHandlerStateChange&&typeof onHandlerStateChange!=='function'){if(onGestureHandlerStateChange){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureStateEventHandler=onHandlerStateChange;}else{if(onGestureHandlerStateChange&&typeof onGestureHandlerStateChange!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var events={onGestureHandlerEvent:this.state.allowTouches?gestureEventHandler:undefined,onGestureHandlerStateChange:this.state.allowTouches?gestureStateEventHandler:undefined};this.propsRef.current=events;var child=React.Children.only(this.props.children);var grandChildren=child.props.children;if(Touchable.TOUCH_TARGET_DEBUG&&child.type&&(child.type==='RNGestureHandlerButton'||child.type.name==='View'||child.type.displayName==='View')){grandChildren=React.Children.toArray(grandChildren);grandChildren.push(Touchable.renderDebugView({color:'mediumspringgreen',hitSlop:child.props.hitSlop}));}return React.cloneElement(child,_objectSpread({ref:this.refHandler,collapsable:false},events),grandChildren);}}]);return Handler;}(React.Component);_defineProperty(Handler,\"displayName\",name);return Handler;}","map":{"version":3,"mappings":"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","names":["React","deepEqual","RNGestureHandlerModule","State","handlerIDToTag","getNextHandlerTag","filterConfig","findNodeHandle","UIManagerAny","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","_UIManagerAny$getView2","getConstants","_UIManagerAny$getCons","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","Platform","OS","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","constructor","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","createRef","id","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","componentDidUpdate","componentWillUnmount","remove","dropGestureHandler","clearImmediate","handlerID","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable","Component"],"sources":["createHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  Touchable,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update();\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          false,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          false\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}