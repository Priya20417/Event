{"ast":null,"code":"function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useFocusedListenersChildrenAdapter(_ref){var navigation=_ref.navigation,focusedListeners=_ref.focusedListeners;var _React$useContext=React.useContext(NavigationBuilderContext),addListener=_React$useContext.addListener;var listener=React.useCallback(function(callback){if(navigation.isFocused()){for(var _iterator=_createForOfIteratorHelperLoose(focusedListeners),_step;!(_step=_iterator()).done;){var _listener=_step.value;var _listener2=_listener(callback),handled=_listener2.handled,result=_listener2.result;if(handled){return{handled:handled,result:result};}}return{handled:true,result:callback(navigation)};}else{return{handled:false,result:null};}},[focusedListeners,navigation]);React.useEffect(function(){return addListener===null||addListener===void 0?void 0:addListener('focus',listener);},[addListener,listener]);}","map":{"version":3,"mappings":"2iCACA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAEA,MAAOC,yBAAP,kCAcA,cAAe,SAASC,mCAAT,MAGH,IAFVC,WAEU,MAFVA,UAEU,CADVC,gBACU,MADVA,gBACU,CACV,sBAAwBJ,KAAK,CAACK,UAANL,CAAiBC,wBAAjBD,CAAxB,CAAQM,WAAR,mBAAQA,WAAR,CAEA,GAAMC,SAAQ,CAAGP,KAAK,CAACQ,WAANR,CACdS,iBAAD,CAA8C,CAC5C,GAAIN,UAAU,CAACO,SAAXP,EAAJ,CAA4B,CAC1B,kDAAuBC,gBAAvB,mCAAyC,IAA9BG,UAA8B,aACvC,eAA4BA,SAAQ,CAACE,QAAD,CAApC,CAAQE,OAAR,YAAQA,OAAR,CAAiBC,MAAjB,YAAiBA,MAAjB,CAEA,GAAID,OAAJ,CAAa,CACX,MAAO,CAAEA,OAAF,CAAEA,OAAF,CAAWC,aAAX,CAAP,CACD,CACF,CAED,MAAO,CAAED,OAAO,CAAE,IAAX,CAAiBC,MAAM,CAAEH,QAAQ,CAACN,UAAD,CAAjC,CAAP,CATF,KAUO,CACL,MAAO,CAAEQ,OAAO,CAAE,KAAX,CAAkBC,MAAM,CAAE,IAA1B,CAAP,CACD,CAdY,EAgBf,CAACR,gBAAD,CAAmBD,UAAnB,CAhBeH,CAAjB,CAmBAA,KAAK,CAACa,SAANb,CACE,iBAAMM,YAAN,OAAMA,aAAN,SAAMA,CAAN,MAAMA,YAAW,CAAG,OAAH,CAAYC,QAAZ,CAAjB,EADFP,CAEE,CAACM,WAAD,CAAcC,QAAd,CAFFP,EAID","names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","navigation","focusedListeners","useContext","addListener","listener","useCallback","callback","isFocused","handled","result","useEffect"],"sources":["useFocusedListenersChildrenAdapter.tsx"],"sourcesContent":["import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(\n    () => addListener?.('focus', listener),\n    [addListener, listener]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}