{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{CodedError,UnavailabilityError}from'expo-modules-core';import ExpoFontLoader from\"./ExpoFontLoader\";import{FontDisplay}from\"./Font.types\";import{getAssetForSource,loadSingleFontAsync,fontFamilyNeedsScoping,getNativeFontName}from\"./FontLoader\";var loaded={};var loadPromises={};export function processFontFamily(fontFamily){if(!fontFamily||!fontFamilyNeedsScoping(fontFamily)){return fontFamily;}if(!isLoaded(fontFamily)){if(__DEV__){if(isLoading(fontFamily)){console.error(\"You started loading the font \\\"\"+fontFamily+\"\\\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.\");}else{console.error(\"fontFamily \\\"\"+fontFamily+\"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");}}return'System';}return\"ExpoFont-\"+getNativeFontName(fontFamily);}export function isLoaded(fontFamily){return fontFamily in loaded;}export function isLoading(fontFamily){return fontFamily in loadPromises;}export function loadAsync(fontFamilyOrFontMap,source){var fontMap,names;return _regeneratorRuntime.async(function loadAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(typeof fontFamilyOrFontMap==='object')){_context.next=8;break;}if(!source){_context.next=3;break;}throw new CodedError(\"ERR_FONT_API\",\"No fontFamily can be used for the provided source: \"+source+\". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");case 3:fontMap=fontFamilyOrFontMap;names=Object.keys(fontMap);_context.next=7;return _regeneratorRuntime.awrap(Promise.all(names.map(function(name){return loadFontInNamespaceAsync(name,fontMap[name]);})));case 7:return _context.abrupt(\"return\");case 8:_context.next=10;return _regeneratorRuntime.awrap(loadFontInNamespaceAsync(fontFamilyOrFontMap,source));case 10:return _context.abrupt(\"return\",_context.sent);case 11:case\"end\":return _context.stop();}}},null,null,null,Promise);}function loadFontInNamespaceAsync(fontFamily,source){var asset;return _regeneratorRuntime.async(function loadFontInNamespaceAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(source){_context3.next=2;break;}throw new CodedError(\"ERR_FONT_SOURCE\",\"Cannot load null or undefined font source: { \\\"\"+fontFamily+\"\\\": \"+source+\" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\"+fontFamily+\"\\\"\");case 2:if(!loaded[fontFamily]){_context3.next=4;break;}return _context3.abrupt(\"return\");case 4:if(!loadPromises.hasOwnProperty(fontFamily)){_context3.next=6;break;}return _context3.abrupt(\"return\",loadPromises[fontFamily]);case 6:asset=getAssetForSource(source);loadPromises[fontFamily]=function _callee(){return _regeneratorRuntime.async(function _callee$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return _regeneratorRuntime.awrap(loadSingleFontAsync(fontFamily,asset));case 3:loaded[fontFamily]=true;case 4:_context2.prev=4;delete loadPromises[fontFamily];return _context2.finish(4);case 7:case\"end\":return _context2.stop();}}},null,null,[[0,,4,7]],Promise);}();_context3.next=10;return _regeneratorRuntime.awrap(loadPromises[fontFamily]);case 10:case\"end\":return _context3.stop();}}},null,null,null,Promise);}export function unloadAllAsync(){var _i,_Object$keys,fontFamily;return _regeneratorRuntime.async(function unloadAllAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(ExpoFontLoader.unloadAllAsync){_context4.next=2;break;}throw new UnavailabilityError('expo-font','unloadAllAsync');case 2:if(!Object.keys(loadPromises).length){_context4.next=4;break;}throw new CodedError(\"ERR_UNLOAD\",\"Cannot unload fonts while they're still loading: \"+Object.keys(loadPromises).join(', '));case 4:for(_i=0,_Object$keys=Object.keys(loaded);_i<_Object$keys.length;_i++){fontFamily=_Object$keys[_i];delete loaded[fontFamily];}_context4.next=7;return _regeneratorRuntime.awrap(ExpoFontLoader.unloadAllAsync());case 7:case\"end\":return _context4.stop();}}},null,null,null,Promise);}export function unloadAsync(fontFamilyOrFontMap,options){var fontMap,names;return _regeneratorRuntime.async(function unloadAsync$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(ExpoFontLoader.unloadAsync){_context5.next=2;break;}throw new UnavailabilityError('expo-font','unloadAsync');case 2:if(!(typeof fontFamilyOrFontMap==='object')){_context5.next=10;break;}if(!options){_context5.next=5;break;}throw new CodedError(\"ERR_FONT_API\",\"No fontFamily can be used for the provided options: \"+options+\". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");case 5:fontMap=fontFamilyOrFontMap;names=Object.keys(fontMap);_context5.next=9;return _regeneratorRuntime.awrap(Promise.all(names.map(function(name){return unloadFontInNamespaceAsync(name,fontMap[name]);})));case 9:return _context5.abrupt(\"return\");case 10:_context5.next=12;return _regeneratorRuntime.awrap(unloadFontInNamespaceAsync(fontFamilyOrFontMap,options));case 12:return _context5.abrupt(\"return\",_context5.sent);case 13:case\"end\":return _context5.stop();}}},null,null,null,Promise);}function unloadFontInNamespaceAsync(fontFamily,options){var nativeFontName;return _regeneratorRuntime.async(function unloadFontInNamespaceAsync$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(loaded[fontFamily]){_context6.next=4;break;}return _context6.abrupt(\"return\");case 4:delete loaded[fontFamily];case 5:nativeFontName=getNativeFontName(fontFamily);if(nativeFontName){_context6.next=8;break;}throw new CodedError(\"ERR_FONT_FAMILY\",\"Cannot unload an empty name\");case 8:_context6.next=10;return _regeneratorRuntime.awrap(ExpoFontLoader.unloadAsync(nativeFontName,options));case 10:case\"end\":return _context6.stop();}}},null,null,null,Promise);}export{FontDisplay};","map":{"version":3,"mappings":"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","names":["CodedError","UnavailabilityError","ExpoFontLoader","FontDisplay","getAssetForSource","loadSingleFontAsync","fontFamilyNeedsScoping","getNativeFontName","loaded","loadPromises","processFontFamily","fontFamily","isLoaded","__DEV__","isLoading","console","error","loadAsync","fontFamilyOrFontMap","source","fontMap","names","Object","keys","Promise","all","map","name","loadFontInNamespaceAsync","hasOwnProperty","asset","unloadAllAsync","length","join","unloadAsync","options","unloadFontInNamespaceAsync","nativeFontName"],"sourceRoot":"","sources":["../src/Font.ts"],"sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/introduction/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  return fontFamily in loaded;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport async function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"]},"metadata":{},"sourceType":"module"}