{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import I18nManager from\"react-native-web/dist/exports/I18nManager\";import InteractionManager from\"react-native-web/dist/exports/InteractionManager\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import Platform from\"react-native-web/dist/exports/Platform\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Animated from'react-native-reanimated';import DrawerProgressContext from\"../../utils/DrawerProgressContext\";import{GestureState,PanGestureHandler}from\"../GestureHandler\";import Overlay from\"./Overlay\";var Clock=Animated.Clock,Value=Animated.Value,onChange=Animated.onChange,clockRunning=Animated.clockRunning,startClock=Animated.startClock,stopClock=Animated.stopClock,spring=Animated.spring,abs=Animated.abs,add=Animated.add,and=Animated.and,block=Animated.block,call=Animated.call,cond=Animated.cond,divide=Animated.divide,eq=Animated.eq,event=Animated.event,greaterThan=Animated.greaterThan,lessThan=Animated.lessThan,max=Animated.max,min=Animated.min,multiply=Animated.multiply,neq=Animated.neq,or=Animated.or,set=Animated.set,sub=Animated.sub;var TRUE=1;var FALSE=0;var NOOP=0;var UNSET=-1;var DIRECTION_LEFT=1;var DIRECTION_RIGHT=-1;var SWIPE_DISTANCE_MINIMUM=5;var DEFAULT_DRAWER_WIDTH='80%';var SPRING_CONFIG={stiffness:1000,damping:500,mass:3,overshootClamping:true,restDisplacementThreshold:0.01,restSpeedThreshold:0.01};var ANIMATED_ZERO=new Animated.Value(0);var ANIMATED_ONE=new Animated.Value(1);var DrawerView=function(_React$Component){_inherits(DrawerView,_React$Component);var _super=_createSuper(DrawerView);function DrawerView(){var _this;_classCallCheck(this,DrawerView);_this=_super.apply(this,arguments);_defineProperty(_assertThisInitialized(_this),\"handleEndInteraction\",function(){if(_this.interactionHandle!==undefined){InteractionManager.clearInteractionHandle(_this.interactionHandle);_this.interactionHandle=undefined;}});_defineProperty(_assertThisInitialized(_this),\"handleStartInteraction\",function(){if(_this.interactionHandle===undefined){_this.interactionHandle=InteractionManager.createInteractionHandle();}});_defineProperty(_assertThisInitialized(_this),\"getDrawerWidth\",function(){var _this$props=_this.props,drawerStyle=_this$props.drawerStyle,dimensions=_this$props.dimensions;var _ref4=StyleSheet.flatten(drawerStyle)||{},_ref4$width=_ref4.width,width=_ref4$width===void 0?DEFAULT_DRAWER_WIDTH:_ref4$width;if(typeof width==='string'&&width.endsWith('%')){var percentage=Number(width.replace(/%$/,''));if(Number.isFinite(percentage)){return dimensions.width*(percentage/100);}}return typeof width==='number'?width:0;});_defineProperty(_assertThisInitialized(_this),\"clock\",new Clock());_defineProperty(_assertThisInitialized(_this),\"interactionHandle\",void 0);_defineProperty(_assertThisInitialized(_this),\"isDrawerTypeFront\",new Value(_this.props.drawerType==='front'?TRUE:FALSE));_defineProperty(_assertThisInitialized(_this),\"isOpen\",new Value(_this.props.open?TRUE:FALSE));_defineProperty(_assertThisInitialized(_this),\"nextIsOpen\",new Value(UNSET));_defineProperty(_assertThisInitialized(_this),\"isSwiping\",new Value(FALSE));_defineProperty(_assertThisInitialized(_this),\"initialDrawerWidth\",_this.getDrawerWidth());_defineProperty(_assertThisInitialized(_this),\"gestureState\",new Value(GestureState.UNDETERMINED));_defineProperty(_assertThisInitialized(_this),\"touchX\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"velocityX\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"gestureX\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"offsetX\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"position\",new Value(_this.props.open?_this.initialDrawerWidth*(_this.props.drawerPosition==='right'?DIRECTION_RIGHT:DIRECTION_LEFT):0));_defineProperty(_assertThisInitialized(_this),\"containerWidth\",new Value(_this.props.dimensions.width));_defineProperty(_assertThisInitialized(_this),\"drawerWidth\",new Value(_this.initialDrawerWidth));_defineProperty(_assertThisInitialized(_this),\"drawerOpacity\",new Value(_this.props.drawerType==='permanent'?1:0));_defineProperty(_assertThisInitialized(_this),\"drawerPosition\",new Value(_this.props.drawerPosition==='right'?DIRECTION_RIGHT:DIRECTION_LEFT));_defineProperty(_assertThisInitialized(_this),\"touchDistanceFromDrawer\",cond(_this.isDrawerTypeFront,cond(eq(_this.drawerPosition,DIRECTION_LEFT),max(sub(sub(_this.touchX,_this.gestureX),_this.drawerWidth),0),min(multiply(sub(sub(_this.containerWidth,_this.drawerWidth),sub(_this.touchX,_this.gestureX)),DIRECTION_RIGHT),0)),0));_defineProperty(_assertThisInitialized(_this),\"swipeDistanceThreshold\",new Value(_this.props.swipeDistanceThreshold));_defineProperty(_assertThisInitialized(_this),\"swipeVelocityThreshold\",new Value(_this.props.swipeVelocityThreshold));_defineProperty(_assertThisInitialized(_this),\"currentOpenValue\",_this.props.open);_defineProperty(_assertThisInitialized(_this),\"pendingOpenValue\",void 0);_defineProperty(_assertThisInitialized(_this),\"isStatusBarHidden\",false);_defineProperty(_assertThisInitialized(_this),\"manuallyTriggerSpring\",new Value(FALSE));_defineProperty(_assertThisInitialized(_this),\"transitionTo\",function(isOpen){var toValue=new Value(0);var frameTime=new Value(0);var state={position:_this.position,time:new Value(0),finished:new Value(FALSE),velocity:new Value(0)};return block([cond(clockRunning(_this.clock),NOOP,[set(toValue,multiply(isOpen,_this.drawerWidth,_this.drawerPosition)),set(frameTime,0),set(state.time,0),set(state.finished,FALSE),set(state.velocity,_this.velocityX),set(_this.isOpen,isOpen),startClock(_this.clock),call([],_this.handleStartInteraction),set(_this.manuallyTriggerSpring,FALSE)]),spring(_this.clock,state,_objectSpread(_objectSpread({},SPRING_CONFIG),{},{toValue:toValue})),cond(state.finished,[set(_this.touchX,0),set(_this.gestureX,0),set(_this.velocityX,0),set(_this.offsetX,0),stopClock(_this.clock),call([_this.isOpen],function(_ref){var _ref5=_slicedToArray(_ref,1),value=_ref5[0];var open=Boolean(value);_this.handleEndInteraction();if(open!==_this.props.open){_this.toggleDrawer(_this.props.open);}})])]);});_defineProperty(_assertThisInitialized(_this),\"dragX\",block([onChange(_this.isOpen,call([_this.isOpen],function(_ref2){var _ref6=_slicedToArray(_ref2,1),value=_ref6[0];var open=Boolean(value);_this.currentOpenValue=open;if(open!==_this.props.open){if(open){_this.props.onOpen();}else{_this.props.onClose();}_this.pendingOpenValue=open;_this.forceUpdate();}})),onChange(_this.nextIsOpen,cond(neq(_this.nextIsOpen,UNSET),[cond(clockRunning(_this.clock),stopClock(_this.clock)),set(_this.isOpen,_this.nextIsOpen),set(_this.gestureX,0),set(_this.nextIsOpen,UNSET)])),onChange(_this.isSwiping,call([_this.isSwiping],function(_ref3){var _ref7=_slicedToArray(_ref3,1),value=_ref7[0];var keyboardDismissMode=_this.props.keyboardDismissMode;if(value===TRUE){if(keyboardDismissMode==='on-drag'){Keyboard.dismiss();}_this.toggleStatusBar(true);}else{_this.toggleStatusBar(_this.currentOpenValue);}})),onChange(_this.gestureState,cond(eq(_this.gestureState,GestureState.ACTIVE),call([],_this.handleStartInteraction))),cond(eq(_this.gestureState,GestureState.ACTIVE),[cond(_this.isSwiping,NOOP,[set(_this.isSwiping,TRUE),set(_this.offsetX,_this.position)]),set(_this.position,add(_this.offsetX,_this.gestureX,_this.touchDistanceFromDrawer)),stopClock(_this.clock)],[set(_this.isSwiping,FALSE),set(_this.touchX,0),_this.transitionTo(cond(_this.manuallyTriggerSpring,_this.isOpen,cond(or(and(greaterThan(abs(_this.gestureX),SWIPE_DISTANCE_MINIMUM),greaterThan(abs(_this.velocityX),_this.swipeVelocityThreshold)),greaterThan(abs(_this.gestureX),_this.swipeDistanceThreshold)),cond(eq(_this.drawerPosition,DIRECTION_LEFT),greaterThan(cond(eq(_this.velocityX,0),_this.gestureX,_this.velocityX),0),lessThan(cond(eq(_this.velocityX,0),_this.gestureX,_this.velocityX),0)),_this.isOpen)))]),_this.position]));_defineProperty(_assertThisInitialized(_this),\"translateX\",cond(eq(_this.drawerPosition,DIRECTION_RIGHT),min(max(multiply(_this.drawerWidth,-1),_this.dragX),0),max(min(_this.drawerWidth,_this.dragX),0)));_defineProperty(_assertThisInitialized(_this),\"progress\",cond(eq(_this.drawerWidth,0),0,abs(divide(_this.translateX,_this.drawerWidth))));_defineProperty(_assertThisInitialized(_this),\"handleGestureEvent\",event([{nativeEvent:{x:_this.touchX,translationX:_this.gestureX,velocityX:_this.velocityX}}]));_defineProperty(_assertThisInitialized(_this),\"handleGestureStateChange\",event([{nativeEvent:{state:function state(s){return set(_this.gestureState,s);}}}]));_defineProperty(_assertThisInitialized(_this),\"handleContainerLayout\",function(e){return _this.containerWidth.setValue(e.nativeEvent.layout.width);});_defineProperty(_assertThisInitialized(_this),\"handleDrawerLayout\",function(e){_this.drawerWidth.setValue(e.nativeEvent.layout.width);_this.toggleDrawer(_this.props.open);requestAnimationFrame(function(){return requestAnimationFrame(function(){return _this.drawerOpacity.setValue(1);});});});_defineProperty(_assertThisInitialized(_this),\"toggleDrawer\",function(open){if(_this.currentOpenValue!==open){_this.nextIsOpen.setValue(open?TRUE:FALSE);_this.currentOpenValue=open;}});_defineProperty(_assertThisInitialized(_this),\"toggleStatusBar\",function(hidden){var _this$props2=_this.props,hideStatusBar=_this$props2.hideStatusBarOnOpen,statusBarAnimation=_this$props2.statusBarAnimation;if(hideStatusBar&&_this.isStatusBarHidden!==hidden){_this.isStatusBarHidden=hidden;StatusBar.setHidden(hidden,statusBarAnimation);}});return _this;}_createClass(DrawerView,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this$props3=this.props,open=_this$props3.open,drawerPosition=_this$props3.drawerPosition,drawerType=_this$props3.drawerType,swipeDistanceThreshold=_this$props3.swipeDistanceThreshold,swipeVelocityThreshold=_this$props3.swipeVelocityThreshold,hideStatusBar=_this$props3.hideStatusBarOnOpen;if(typeof this.pendingOpenValue!=='boolean'||open!==this.pendingOpenValue){this.toggleDrawer(open);}this.pendingOpenValue=undefined;if(open!==prevProps.open&&hideStatusBar){this.toggleStatusBar(open);}if(prevProps.drawerPosition!==drawerPosition){this.drawerPosition.setValue(drawerPosition==='right'?DIRECTION_RIGHT:DIRECTION_LEFT);}if(prevProps.drawerType!==drawerType){this.isDrawerTypeFront.setValue(drawerType==='front'?TRUE:FALSE);}if(prevProps.swipeDistanceThreshold!==swipeDistanceThreshold){this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);}if(prevProps.swipeVelocityThreshold!==swipeVelocityThreshold){this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.toggleStatusBar(false);this.handleEndInteraction();}},{key:\"render\",value:function render(){var _this2=this;var _this$props4=this.props,open=_this$props4.open,swipeEnabled=_this$props4.swipeEnabled,drawerPosition=_this$props4.drawerPosition,drawerType=_this$props4.drawerType,swipeEdgeWidth=_this$props4.swipeEdgeWidth,drawerStyle=_this$props4.drawerStyle,overlayStyle=_this$props4.overlayStyle,renderDrawerContent=_this$props4.renderDrawerContent,renderSceneContent=_this$props4.renderSceneContent,gestureHandlerProps=_this$props4.gestureHandlerProps;var isOpen=drawerType==='permanent'?true:open;var isRight=drawerPosition==='right';var contentTranslateX=drawerType==='front'?ANIMATED_ZERO:this.translateX;var drawerTranslateX=drawerType==='back'?I18nManager.isRTL?multiply(sub(this.containerWidth,this.drawerWidth),isRight?1:-1):ANIMATED_ZERO:this.translateX;var offset=drawerType==='back'?0:I18nManager.isRTL?'100%':multiply(this.drawerWidth,-1);var hitSlop=isRight?{right:0,width:isOpen?undefined:swipeEdgeWidth}:{left:0,width:isOpen?undefined:swipeEdgeWidth};var progress=drawerType==='permanent'?ANIMATED_ONE:this.progress;return React.createElement(DrawerProgressContext.Provider,{value:progress},React.createElement(PanGestureHandler,_extends({activeOffsetX:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM],failOffsetY:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM],onGestureEvent:this.handleGestureEvent,onHandlerStateChange:this.handleGestureStateChange,hitSlop:hitSlop,enabled:drawerType!=='permanent'&&swipeEnabled},gestureHandlerProps),React.createElement(Animated.View,{onLayout:this.handleContainerLayout,style:[styles.main,{flexDirection:drawerType==='permanent'&&!isRight?'row-reverse':'row'}]},React.createElement(Animated.View,{style:[styles.content,{transform:drawerType==='permanent'?[]:[{translateX:contentTranslateX}]}]},React.createElement(View,{accessibilityElementsHidden:isOpen&&drawerType!=='permanent',importantForAccessibility:isOpen&&drawerType!=='permanent'?'no-hide-descendants':'auto',style:styles.content},renderSceneContent()),drawerType==='permanent'?null:React.createElement(Overlay,{progress:progress,onPress:function onPress(){return _this2.toggleDrawer(false);},style:overlayStyle,accessibilityElementsHidden:!isOpen,importantForAccessibility:isOpen?'auto':'no-hide-descendants'})),React.createElement(Animated.Code,{exec:this.containerWidth}),drawerType==='permanent'?null:React.createElement(Animated.Code,{exec:block([onChange(this.manuallyTriggerSpring,[cond(eq(this.manuallyTriggerSpring,TRUE),[set(this.nextIsOpen,FALSE),call([],function(){return _this2.currentOpenValue=false;})])])])}),React.createElement(Animated.View,{accessibilityViewIsModal:isOpen&&drawerType!=='permanent',removeClippedSubviews:Platform.OS!=='ios',onLayout:this.handleDrawerLayout,style:[styles.container,{transform:drawerType==='permanent'?[]:[{translateX:drawerTranslateX}],opacity:this.drawerOpacity},drawerType==='permanent'?isRight?{right:0}:{left:0}:[styles.nonPermanent,isRight?{right:offset}:{left:offset},{zIndex:drawerType==='back'?-1:0}],drawerStyle]},renderDrawerContent()))));}}]);return DrawerView;}(React.Component);export{DrawerView as default};var styles=StyleSheet.create({container:{backgroundColor:'white',maxWidth:'100%'},nonPermanent:{position:'absolute',top:0,bottom:0,width:DEFAULT_DRAWER_WIDTH},content:{flex:1},main:_objectSpread({flex:1},Platform.select({web:null,default:{overflow:'hidden'}}))});","map":{"version":3,"mappings":"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","names":["React","Animated","DrawerProgressContext","GestureState","PanGestureHandler","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","interactionHandle","undefined","InteractionManager","clearInteractionHandle","createInteractionHandle","props","drawerStyle","dimensions","StyleSheet","flatten","width","endsWith","percentage","Number","replace","isFinite","drawerType","open","getDrawerWidth","UNDETERMINED","initialDrawerWidth","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","offsetX","value","Boolean","handleEndInteraction","toggleDrawer","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","e","setValue","layout","requestAnimationFrame","drawerOpacity","hidden","hideStatusBar","hideStatusBarOnOpen","statusBarAnimation","isStatusBarHidden","StatusBar","setHidden","componentDidUpdate","prevProps","componentWillUnmount","render","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","I18nManager","isRTL","offset","hitSlop","right","left","progress","Provider","activeOffsetX","failOffsetY","onGestureEvent","handleGestureEvent","onHandlerStateChange","handleGestureStateChange","enabled","View","onLayout","handleContainerLayout","style","styles","main","flexDirection","content","transform","accessibilityElementsHidden","importantForAccessibility","onPress","Code","exec","accessibilityViewIsModal","removeClippedSubviews","Platform","OS","handleDrawerLayout","container","opacity","nonPermanent","zIndex","Component","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\nexport default class DrawerView extends React.Component<DrawerProps> {\n  componentDidUpdate(prevProps: DrawerProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\n      this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && swipeEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !isRight\n                    ? 'row-reverse'\n                    : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: contentTranslateX }],\n                },\n              ]}\n            >\n              <View\n                accessibilityElementsHidden={\n                  isOpen && drawerType !== 'permanent'\n                }\n                importantForAccessibility={\n                  isOpen && drawerType !== 'permanent'\n                    ? 'no-hide-descendants'\n                    : 'auto'\n                }\n                style={styles.content}\n              >\n                {renderSceneContent()}\n              </View>\n              {\n                // Disable overlay if sidebar is permanent\n                drawerType === 'permanent' ? null : (\n                  <Overlay\n                    progress={progress}\n                    onPress={() => this.toggleDrawer(false)}\n                    style={overlayStyle as any}\n                    accessibilityElementsHidden={!isOpen}\n                    importantForAccessibility={\n                      isOpen ? 'auto' : 'no-hide-descendants'\n                    }\n                  />\n                )\n              }\n            </Animated.View>\n            <Animated.Code\n              // This is needed to make sure that container width updates with `setValue`\n              // Without this, it won't update when not used in styles\n              exec={this.containerWidth}\n            />\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                },\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    isRight\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      isRight ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent()}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}