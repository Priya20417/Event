{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import React from'react';import PlatformConstants from\"../PlatformConstants\";import createHandler from\"./createHandler\";import{baseGestureHandlerProps}from\"./gestureHandlerCommon\";export var forceTouchGestureHandlerProps=['minForce','maxForce','feedbackOnActivation'];var ForceTouchFallback=function(_React$Component){_inherits(ForceTouchFallback,_React$Component);var _super=_createSuper(ForceTouchFallback);function ForceTouchFallback(){_classCallCheck(this,ForceTouchFallback);return _super.apply(this,arguments);}_createClass(ForceTouchFallback,[{key:\"componentDidMount\",value:function componentDidMount(){console.warn('ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase');}},{key:\"render\",value:function render(){return this.props.children;}}]);return ForceTouchFallback;}(React.Component);_defineProperty(ForceTouchFallback,\"forceTouchAvailable\",false);export var ForceTouchGestureHandler=PlatformConstants!==null&&PlatformConstants!==void 0&&PlatformConstants.forceTouchAvailable?createHandler({name:'ForceTouchGestureHandler',allowedProps:[].concat(_toConsumableArray(baseGestureHandlerProps),forceTouchGestureHandlerProps),config:{}}):ForceTouchFallback;ForceTouchGestureHandler.forceTouchAvailable=(PlatformConstants===null||PlatformConstants===void 0?void 0:PlatformConstants.forceTouchAvailable)||false;","map":{"version":3,"mappings":"owCAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,MAAOC,kBAAP,4BACA,MAAOC,cAAP,uBACA,OAEEC,uBAFF,8BAKA,MAAO,IAAMC,8BAA6B,CAAG,CAC3C,UAD2C,CAE3C,UAF2C,CAG3C,sBAH2C,CAAtC,C,GAMDC,mB,mSAEJC,4BAAoB,CAClBC,OAAO,CAACC,IAARD,CACE,8NADFA,EAGD,C,sBACDE,iBAAS,CACP,MAAO,MAAKC,KAAL,CAAWC,QAAlB,CACD,C,gCAT8BX,KAAK,CAACY,S,kBAAjCP,mB,sBACyB,OAoD/B,MAAO,IAAMQ,yBAAwB,CAAGZ,iBAAiB,OAAjBA,mBAAiB,SAAjBA,mBAAiB,CAAEa,mBAAnBb,CACpCC,aAAa,CAGX,CACAa,IAAI,CAAE,0BADN,CAEAC,YAAY,8BACPb,uBADO,EAEPC,6BAFO,CAFZ,CAMAa,MAAM,CAAE,EANR,CAHW,CADuBhB,CAYpCI,kBAZG,CAcNQ,wBAAD,CAAuDC,mBAAtDD,CACC,kBAAiB,OAAjBZ,mBAAiB,SAAjBA,yBAAiB,CAAEa,mBAAnB,GAA0C,KAD3CD","names":["React","PlatformConstants","createHandler","baseGestureHandlerProps","forceTouchGestureHandlerProps","ForceTouchFallback","componentDidMount","console","warn","render","props","children","Component","ForceTouchGestureHandler","forceTouchAvailable","name","allowedProps","config"],"sources":["ForceTouchGestureHandler.ts"],"sourcesContent":["import React from 'react';\nimport PlatformConstants from '../PlatformConstants';\nimport createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const forceTouchGestureHandlerProps = [\n  'minForce',\n  'maxForce',\n  'feedbackOnActivation',\n] as const;\n\nclass ForceTouchFallback extends React.Component {\n  static forceTouchAvailable = false;\n  componentDidMount() {\n    console.warn(\n      'ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'\n    );\n  }\n  render() {\n    return this.props.children;\n  }\n}\n\nexport type ForceTouchGestureHandlerEventPayload = {\n  x: number;\n  y: number;\n  absoluteX: number;\n  absoluteY: number;\n\n  /**\n   * The pressure of a touch.\n   */\n  force: number;\n};\n\nexport interface ForceTouchGestureConfig {\n  /**\n   *\n   * A minimal pressure that is required before handler can activate. Should be a\n   * value from range `[0.0, 1.0]`. Default is `0.2`.\n   */\n  minForce?: number;\n\n  /**\n   * A maximal pressure that could be applied for handler. If the pressure is\n   * greater, handler fails. Should be a value from range `[0.0, 1.0]`.\n   */\n  maxForce?: number;\n\n  /**\n   * Boolean value defining if haptic feedback has to be performed on\n   * activation.\n   */\n  feedbackOnActivation?: boolean;\n}\n\nexport interface ForceTouchGestureHandlerProps\n  extends BaseGestureHandlerProps<ForceTouchGestureHandlerEventPayload>,\n    ForceTouchGestureConfig {}\n\nexport type ForceTouchGestureHandler = typeof ForceTouchGestureHandler & {\n  forceTouchAvailable: boolean;\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const ForceTouchGestureHandler = PlatformConstants?.forceTouchAvailable\n  ? createHandler<\n      ForceTouchGestureHandlerProps,\n      ForceTouchGestureHandlerEventPayload\n    >({\n      name: 'ForceTouchGestureHandler',\n      allowedProps: [\n        ...baseGestureHandlerProps,\n        ...forceTouchGestureHandlerProps,\n      ] as const,\n      config: {},\n    })\n  : ForceTouchFallback;\n\n(ForceTouchGestureHandler as ForceTouchGestureHandler).forceTouchAvailable =\n  PlatformConstants?.forceTouchAvailable || false;\n"]},"metadata":{},"sourceType":"module"}